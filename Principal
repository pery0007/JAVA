
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.time.Period;

// 3 – Deve conter uma classe Principal
public class Principal {
    public static void main(String[] args) {
        //3.1 – Inserir todos os funcionários, na mesma ordem e informações da tabela acima. 
        // Ao execultar 
        Funcionario maria = new Funcionario("Maria", LocalDate.of(2000, 10, 18), new BigDecimal("2009.44"), "Operador");
        Funcionario joao = new Funcionario("João", LocalDate.of(1990, 5, 12), new BigDecimal("2284.38"), "Operador");
        Funcionario caio = new Funcionario("Caio", LocalDate.of(1961, 5, 2), new BigDecimal("9836.14"), "Coordenador");
        Funcionario miguel = new Funcionario("Miguel", LocalDate.of(1988, 10, 14), new BigDecimal("19119.88"), "Diretor");
        Funcionario alice = new Funcionario("Alice", LocalDate.of(1995, 1, 5), new BigDecimal("2234.68"), "Recepcionista");
        Funcionario heitor = new Funcionario("Heitor", LocalDate.of(1999, 11, 19), new BigDecimal("1582.72"), "Operador");
        Funcionario artur = new Funcionario("Artur", LocalDate.of(1993, 3, 31), new BigDecimal("4071.84"), "Contador");
        Funcionario laura = new Funcionario("Laura", LocalDate.of(1994, 7, 8), new BigDecimal("3017.45"), "Gerente");
        Funcionario heloisa = new Funcionario("Heloisa", LocalDate.of(2003, 5, 24), new BigDecimal("1606.85"), "Eletricista");
        Funcionario helena = new Funcionario("Helena", LocalDate.of(1996, 9, 2), new BigDecimal("2799.93"), "Gerente");

        System.out.println("NOME\t\tDATA DE NASCIMENTO\tSÁLARIO\t\tFUNÇÃO");
        exibirFuncionario(maria);
        exibirFuncionario(joao);
        exibirFuncionario(caio);
        exibirFuncionario(miguel);
        exibirFuncionario(alice);
        exibirFuncionario(heitor);
        exibirFuncionario(artur);
        exibirFuncionario(laura);
        exibirFuncionario(heloisa);
        exibirFuncionario(helena);

        List<Funcionario> funcionarios = new ArrayList<>();
        funcionarios.add(maria);
        funcionarios.add(joao);
        funcionarios.add(caio);
        funcionarios.add(miguel);
        funcionarios.add(alice);
        funcionarios.add(heitor);
        funcionarios.add(artur);
        funcionarios.add(laura);
        funcionarios.add(heloisa);
        funcionarios.add(helena);

        System.out.println("NOME\t\tDATA DE NASCIMENTO\tSÁLARIO\t\tFUNÇÃO");
        for (Funcionario funcionario : funcionarios) {
            exibirFuncionario(funcionario);
        }

        //3.10 – Imprimir a lista de funcionários por ordem alfabética.
        System.out.println("\nLista de funcionários em ordem alfabética:\n");
        System.out.println("NOME\t\tDATA DE NASCIMENTO\tSÁLARIO\t\tFUNÇÃO");
        
        // Ordenar a lista de funcionários em ordem alfabética pelo nome
        Collections.sort(funcionarios, (f1, f2) -> f1.getNome().compareTo(f2.getNome()));
        
        for (Funcionario funcionario : funcionarios) {
            exibirFuncionario(funcionario);
        }

        // 3.9 – Imprimir o funcionário com a maior idade, exibir os atributos: nome e idade.
        Funcionario funcionarioMaisVelho = null;
        int idadeMaisVelho = 0;
            for (Funcionario funcionario : funcionarios) {
            LocalDate dataNascimento = funcionario.getDataNascimento();
            int idade = LocalDate.now().getYear() - dataNascimento.getYear();
            if (idade > idadeMaisVelho) {
                idadeMaisVelho = idade;
                funcionarioMaisVelho = funcionario;
            }
     }

        // Imprime o funcionário com a maior idade
        if (funcionarioMaisVelho != null) {
            System.out.println("Funcionário com maior idade:");
            exibirFuncionario(funcionarioMaisVelho);
        }
        // exibir os atributos: nome e idade.
        System.out.println("\nNOME\t\tIDADE");
        for (Funcionario funcionario : funcionarios) {
            System.out.printf("%s\t\t%d%n", funcionario.getNome(), funcionario.getIdade());
        }

        System.out.println("\nNOME\t\tDATA DE NASCIMENTO\tSÁLARIO\t\tFUNÇÃO");
        for (Funcionario funcionario : funcionarios) {
            exibirFuncionario(funcionario);
        }

        for (Funcionario funcionario : funcionarios) {
        BigDecimal salarioAtual = funcionario.getSalario();
        BigDecimal aumento = salarioAtual.multiply(new BigDecimal("0.10")); // 10% de aumento
        BigDecimal novoSalario = salarioAtual.add(aumento);
        funcionario.setSalario(novoSalario);
    }
        // 3.2 – Remover o funcionário “João” da lista. 
        funcionarios.remove(joao);
        
        System.out.println("\nFuncionário \"João\" removido:\n");
        System.out.println("NOME\t\tDATA DE NASCIMENTO\tSÁLARIO\t\tFUNÇÃO");
        for (Funcionario funcionario : funcionarios) {
            exibirFuncionario(funcionario);
        }

        // 3.4 – Os funcionários receberam 10% de aumento de salário, atualizar a lista de funcionários com novo valor. 
        System.out.println("\nLista de funcionários com aumento de 10% do salários:\n");
        System.out.println("NOME\t\tDATA DE NASCIMENTO\tSÁLARIO\t\tFUNÇÃO");
        for (Funcionario funcionario : funcionarios) {
        exibirFuncionario(funcionario);
    }
        // 3.8 – Imprimir os funcionários que fazem aniversário no mês 10 e 12. 
        System.out.println("\nFuncionários que fazem aniversário nos meses 10 e 12:\n");
        System.out.println("NOME\t\tDATA DE NASCIMENTO\tSÁLARIO\t\tFUNÇÃO");
        for (Funcionario funcionario : funcionarios) {
        int mesAniversario = funcionario.getDataNascimento().getMonthValue();
        if (mesAniversario == 10 || mesAniversario == 12) {
            exibirFuncionario(funcionario);
        }
    }
        // 3.6 – Imprimir os funcionários, agrupados por função. 
        Map<String, List<Funcionario>> funcionariosPorFuncao = new HashMap<>();
        for (Funcionario funcionario : funcionarios) {
            String funcao = funcionario.getFuncao();
            List<Funcionario> funcionariosDaFuncao = funcionariosPorFuncao.getOrDefault(funcao, new ArrayList<>());
            funcionariosDaFuncao.add(funcionario);
            funcionariosPorFuncao.put(funcao, funcionariosDaFuncao);
    }
        for (Entry<String, List<Funcionario>> entry : funcionariosPorFuncao.entrySet()) {
            String funcao = entry.getKey();
            List<Funcionario> funcionariosDaFuncao = entry.getValue();
            System.out.println("Função: " + funcao);
            for (Funcionario nomeFuncionario : funcionariosDaFuncao) {
                System.out.println(nomeFuncionario);
            }
            System.out.println();
    }
        // Calcular o total dos salários
        BigDecimal totalSalarios = BigDecimal.ZERO;
        for (Funcionario funcionario : funcionarios) {
            totalSalarios = totalSalarios.add(funcionario.getSalario());
        }

        System.out.println("\nTotal dos salários: " + formatarSalario(totalSalarios));

        // Calcular e imprimir quantos salários mínimos cada funcionário ganha
        System.out.println("\nQuantidade de salários mínimos ganhos por cada funcionário:");
        System.out.println("NOME\t\tSALÁRIO\t\tSALÁRIOS MÍNIMOS");
        for (Funcionario funcionario : funcionarios) {
        BigDecimal salarioMinimo = new BigDecimal("1212.00");
        BigDecimal salariosMinimos = funcionario.getSalario().divide(salarioMinimo, 2, RoundingMode.HALF_UP);
        System.out.printf("%s\t\t%s\t\t%.2f%n", funcionario.getNome(), formatarSalario(funcionario.getSalario()), salariosMinimos);
    }

    }
        // 3.5 – Agrupar os funcionários por função em um MAP, sendo a chave a “função” e o valor a “lista de funcionários”. 
        private static void exibirFuncionario(Funcionario funcionario) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");
        String dataFormatada = funcionario.getDataNascimento().format(formatter);    

        // 3.3 – Imprimir todos os funcionários com todas suas informações, sendo que:
        // informação de data deve ser exibido no formato dd/mm/aaaa
        // informação de valor numérico deve ser exibida no formatado com separador de milhar como ponto e decimal como vírgula. 
        System.out.printf("%s\t\t%s\t\t%s\t\t%s%n",
            funcionario.getNome(),
            dataFormatada,
            formatarSalario(funcionario.getSalario()),
            funcionario.getFuncao());
    }
        private static String formatarSalario(BigDecimal salario) {
            return String.format("%.2f", salario).replace(".", ",");
        }
    }

// 1– Classe Pessoa com os atributos: nome (String) e data nascimento (LocalDate). 
class Pessoa {
    private String nome;
    private LocalDate dataNascimento;

    public Pessoa(String nome, LocalDate dataNascimento) {
        this.nome = nome;
        this.dataNascimento = dataNascimento;
    }

    public String getNome() {
        return nome;
    }

    public LocalDate getDataNascimento() {
        return dataNascimento;
    }

    public String getFuncao() {
        return null;
    }
}

// 2 – Classe Funcionário que estenda a classe Pessoa, com os atributos: salário (BigDecimal) e função (String). 
class Funcionario {
    private String nome;
    private LocalDate dataNascimento;
    private BigDecimal salario;
    private String funcao;

    public String toString() {
        return String.format("Nome: %s, Data de Nascimento: %s, Salário: %s, Função: %s",
            getNome(), getDataNascimento().format(DateTimeFormatter.ofPattern("yyyy/MM/dd")),
            formatarSalario(getSalario()), getFuncao());
    }

    private String formatarSalario(BigDecimal salario) {
    return salario.toString().replace(".", ",");
}

    public Funcionario(String nome, LocalDate dataNascimento, BigDecimal salario, String funcao) {
        this.nome = nome;
        this.dataNascimento = dataNascimento;
        this.salario = salario;
        this.funcao = funcao;
    }

    public void setSalario(BigDecimal salario) {
        this.salario = salario;
    }

    public BigDecimal getSalario() {
        return salario;
    }

    public String getNome() {
        return nome;
    }

    public LocalDate getDataNascimento() {
        return dataNascimento;
    }

    public String getFuncao() {
        return funcao;
    }

    public int getIdade() {
        LocalDate dataAtual = LocalDate.now();
        return Period.between(getDataNascimento(), dataAtual).getYears();
    }

    public BigDecimal getSalariosMinimos(BigDecimal salarioMinimo) {
        return salario.divide(salarioMinimo);
    }
}
